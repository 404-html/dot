#!/usr/bin/env bash
#
# bootstrap installs things.

# Required:
# clone this repo into your $HOME

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
    echo "Now updating dependencies..."
    pip3 install --upgrade setuptools
  else
    fail "error installing dependencies"
  fi
fi

if [[ -z ~/.tmux.conf ]] ; then
  info "installing .tmux"
  git clone https://github.com/krry/.tmux.git
  ln -s ".tmux/.tmux.conf" $HOME
  cp ".tmux/.tmux.conf.local" $HOME
fi

info "Installing jldeen's bin"
# backup old bin, if exists
if [ -d $HOME/bin ]
then
    echo "Current $HOME/bin folder found!!! Creating backup..."
    sudo mv $HOME/bin bin_old
    success "Backup created."
else
    echo "No current $HOME/bin folder found. Proceeding to link bin folder"
    # symlink .dotfiles bin to ~
    ln -s $HOME/.dotfiles/bin $HOME/bin && success "symlink for $HOME/bin folder created"
fi

echo "Do you want powerline-patched hacker fonts?"
read -p "(y/n): " -n1 REPLY
echo ''
if [[ $REPLY =~ ^[Yy]$ ]]
then
  cd $HOME/.dotfiles
  git submodule update --remote
  # install powerline-patched fonts
  . "$HOME/.dotfiles/fonts/install.sh"
  success "Hacker fonts installed. Powerline glyphs enabled."
fi

info "Installing krry's vimrc, vim-plug, and plugins"
if [ ! -d $HOME/.vim ] ; then
  ln -s ~/.dotfiles/vim $HOME/.vim
  cd ~/.vim
  git submodule update --remote
  vim +'PlugInstall --sync' +qa > /dev/null
else
  echo "There is already a .vim dir."
fi

# .config permissions fix
# sudo chown $(whoami) $HOME/.config
# success '.config permissions fixed'

# iterm2 config
echo "Do you want iTerm to use the molokai colorscheme?"
read -p "(y/n): " -n1 REPLY
echo ''
if [[ $REPLY =~ ^[Yy]$ ]]
then
  # Specify the preferences directory
  defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/"
  # Tell iTerm2 to use the custom preferences in the directory
  defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
  if [[ $? -eq 0 ]]
  then
    success "successfully configured iTerm2 to use molokai"
  else
    fail "failed to apply molokai..." >&2
  fi
else
  echo "Okay, no molokai'd iTerm for you."
fi

echo "Do you want mosh for super smooth remote ssh action?"
read -p "(y/n): " -n1 REPLY
echo ''
if [[ $REPLY =~ ^[Yy]$ ]]; then
  cd ~/.dotfiles
  git clone https://github.com/mobile-shell/mosh
  cd mosh
  ./autogen.sh
  ./configure
  make
  make install
else
  echo "Maybe later."
fi

cat << EOF

$&%#&%$&#$&%&#$&%&#$&%&#$&%&%#&#$&%&#$&#$&%&#$&#$&%#&*#%&#%&#%&#%&#
This Mac has been HACKIFY'D, DOTFILE'D, SYMLINK'D, and BOOTSTRAP'D!
I mean that in a good way.

Enjoy devving!

One last step, copy/paste these two lines:

exec zsh
. ./zsh/install.zsh
EOF
$&%#&%$&#$&%&#$&%&#$&%&#$&%&%#&#$&%&#$&#$&%&#$&#$&%#&*#%&#%&#%&#%&#
exit
