"
"
"    db    db d888888b .88b  d88. d8888b.  .o88b.
"    88    88   `88'   88'YbdP`88 88  `8D d8P  Y8
"    Y8    8P    88    88  88  88 88oobY' 8P
"    `8b  d8'    88    88  88  88 88`8b   8b
" db  `8bd8'    .88.   88  88  88 88 `88. Y8b  d8
" VP    YP    Y888888P YP  YP  YP 88   YD  `Y88P'
"
" ðŸ§ž krry
"
" available at github.com/krry/dot

" Always the quintessential opener
    set nocompatible
" Load ALL the vundles
    if filereadable(expand("~/.vimrc.bundles"))
        source ~/.vimrc.bundles
    endif
" Third things third
    filetype plugin indent on      " required after Vundle

    set background=dark
    syntax on
    set encoding=utf-8
    set t_co=256                   " enable 256 colors

" .-. .-. .-. .-. . . .-. .-. .-. .   .-.
" |-  `-. `-. |-  |\|  |   |  |-| |   `-.
" `-' `-' `-' `-' ' `  '  `-' ` ' `-' `-'
"
" Essential modifications

    " Elect a new <leader>
        let mapleader = ','

    " Help is on the K!
        autocmd FileType vim setlocal keywordprg=:help

    " Edit .vimrc
        noremap <leader>ev :e ~/.dot/vimrc.symlink<cr>

    " Source .vimrc
        noremap <leader>sv :source $MYVIMRC<cr>
                     \:exe 'echo ".vimrc resourced"'<cr>

    " Save quickly
        noremap <C-s> :w<cr>
        inoremap <C-s> <esc>:w<cr>

    " Quit easily
        nnoremap <C-q> :q<cr>

    " Change directory to here
        cmap cwd lcd %:p:h

    " Really Write! - for when you forget to sudo (thx @spf13)
        cmap w!! w !sudo tee % >/dev/null

    " Mouse
        set mouse=a                    " all mouse functions on
        set mousehide                  " hide mouse when typing

    " Copy & Paste anywhere
        if has('clipboard')
            if has('unnamedplus')      " try to use + register for copy-paste
                set clipboard=unnamed,unnamedplus
            else
                set clipboard=unnamed  " otherwise use * register on mac/win
            endif
        endif

        " Yank to the end of the line like C and D
            nnoremap Y y$

    " Play nice with the shell
        set noswapfile
        set nobackup

        if &shell =~# 'fish$'
            set shell=sh               " vim doesn't like fish for its shell
        endif

    " Markdown, not Modula-2
        au BufRead,BufNewFile *.{md,markdown} setf markdown

" ~|~ _  _| _  _ _|_ _ _|_. _  _
" _|_| |(_|(/_| | | (_| | |(_)| |
"
" Indentation

    set tabstop=4                   " tabs are 4 spaces
    set softtabstop=4               " insert/<bs> use 4-space tabs
    set shiftwidth=4                " autoindent 4-space tabs
    set expandtab                   " autoindent with space-tabs
    set autoindent                  " according to previous line
    set smartindent                 " according to brackets and such

" | . _  _  _
" |_|| |(/__\
"
" Lines

    set nowrap                      " leave lines intact by
    set number                      " shows line number
    if (exists('+colorcolumn'))     " make final column visible
      set colorcolumn=80
      highlight ColorColumn ctermbg=8
    endif

" |_|   _ . _  _  _
" | |\/(_||(/_| |(/_
"    /  _|
"
" Hygiene

    set list
    set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:. " highlight problematic whitespace
    set nomodeline                  " don't look for vim settings at the top

    " EasyAlign horizontal whitespace
    vnoremap <silent> <Enter> :EasyAlign<cr>

    "Zenroom+Goyo
    nnoremap <silent> <leader>z :Goyo<cr>


" .dP"Y8 888888    db    88""Yb  dP""b8 88  88
" `Ybo." 88__     dPYb   88__dP dP   `" 88  88
" o.`Y8b 88""    dP__Yb  88"Yb  Yb      888888
" 8bodP' 888888 dP""""Yb 88  Yb  YboodP 88  88

" Search

    set hlsearch                   " highlight search matches
    set incsearch                  " search as you type
    set ignorecase                 " case insensitive search
    set smartcase                  " case sensitive when uc used
    set showmatch                  " show matching brackets/parenthesis

    " toggle search highlighting
    nmap <silent> <leader>/ :set invhlsearch<CR>

" ____ ___ ____ _    ___
" |     |  |__/ |    |__]
" |___  |  |  \ |___ |`
"
" Ctrl-P file finder with Ag and Ack support

    " thx @spf13: https://github.com/spf13/spf13-vim/blob/3.0/.vimrc#L641
    if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
        let g:ctrlp_working_path_mode = 'ra'
        nnoremap <silent> <d-t> :ctrlp<cr>
        nnoremap <silent> <d-r> :ctrlpmru<cr>
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

        if executable('ag')
            let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
        elseif executable('ack-grep')
            let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
        elseif executable('ack')
            let s:ctrlp_fallback = 'ack %s --nocolor -f'
        " on windows use "dir" as fallback command.
        elseif windows()
            let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
        else
            let s:ctrlp_fallback = 'find %s -type f'
        endif
        if exists("g:ctrlp_user_command")
            unlet g:ctrlp_user_command
        endif
        let g:ctrlp_user_command = {
            \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -i .'],
            \ },
            \ 'fallback': s:ctrlp_fallback
        \ }

        if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
            let g:ctrlp_extensions = ['funky']
            nnoremap <leader>fu :ctrlpfunky<cr>
        endif
    endif

" ___  ____ _  _ _ ___ ____
" |  \ |___ |\ | |  |  |___
" |__/ |___ | \| |  |  |___
"
" Denite fuzzy file search options

    nnoremap <leader>o :DeniteProjectDir -buffer-name=git -direction=top file_rec/git<CR>
    " map <leader>O :DeniteProjectDir -buffer-name=files -direction=top file_rec<CR>

    call denite#custom#var('file_rec', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-u', '-g', ''])
                " -u flag to unrestrict (see ag docs)
    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

" 8b    d8  dP"Yb  Yb    dP 888888 8b    d8 888888 88b 88 888888
" 88b  d88 dP   Yb  Yb  dP  88__   88b  d88 88__   88Yb88   88
" 88YbdP88 Yb   dP   YbdP   88""   88YbdP88 88""   88 Y88   88
" 88 YY 88  YbodP     YP    888888 88 YY 88 888888 88  Y8   88

" /~`    _ _ _  _
" \_,|_|| _\(_)|
"
" Cursor

    set backspace=indent,eol,start " allow backspace when inserting
    set cursorline                 " shows line cursor is on
    set whichwrap+=<,>,h,l,[,]     " wrap arrow keys between lines
    set scrolljump=5                " lines to scroll when cursor leaves screen
    set scrolloff=3                 " minimum lines to keep above and below cursor
    set foldenable                  " auto fold code

" Wildfire text object selection

    " fire grows, water shrinks

    " This selects the next closest text object.
    map <Space> <Plug>(wildfire-fuel)
    " This selects the previous closest text object.
    vmap <M-Space> <Plug>(wildfire-water)

" (~|_  _  __|_ _  _|_ _
" _)| |(_)|  | (_|_|| _\
"
" Shortcuts

    " Cursor glides between lines, wrapped or not
        noremap j gj
        noremap k gk

    " Easier horizontal scroll
        map zl zL
        map zh zH

    " make a new line above or below w/o insert mode
        nmap <C-o> O<Esc>
        nmap <M-o> o<Esc>

        nmap Ã˜ O<Esc>
        nmap Ã¸ o<Esc>

    " move lines around with <M-h/j/k/l>
        " also map to symbols they produce (Ë™âˆ†ËšÂ¬ = hjkl)
        " iTerm recognizes Option as Meta key
        " but Terminal may not
        nnoremap <M-h> <<
        nnoremap <M-j> :m .+1<CR>==
        nnoremap <M-k> :m .-2<CR>==
        nnoremap <M-l> >>

        nnoremap Ë™ <<
        nnoremap âˆ† :m .+1<CR>==
        nnoremap Ëš :m .-2<CR>==
        nnoremap Â¬ >>

        inoremap <M-h> <C-d>
        inoremap <M-j> <Esc>:m .+1<CR>==gi
        inoremap <M-k> <Esc>:m .-2<CR>==gi
        inoremap <M-l> <C-t>

        inoremap Ë™ <C-d>
        inoremap âˆ† <Esc>:m .+1<CR>==gi
        inoremap Ëš <Esc>:m .-2<CR>==gi
        inoremap Â¬ <C-t>

        vnoremap <M-h> <gv
        vnoremap <M-j> :m '>+1<CR>gv=gv
        vnoremap <M-k> :m '<-2<CR>gv=gv
        vnoremap <M-l> >gv

        vnoremap Ë™ <gv
        vnoremap âˆ† :m '>+1<CR>gv=gv
        vnoremap Ëš :m '<-2<CR>gv=gv
        vnoremap Â¬ >gv

" \    /. _  _| _    _  ()   |~) _  _  _  _
"  \/\/ || |(_|(_)VV_\  (_X  |~ (_|| |(/__\
"
" Windows & Panes

    set splitright                 " vertical splits go to the right
    set splitbelow                 " horizontal splits go below

    " todo: default to vertical split for help pane

    " windowpane navigation
    " same bindings as Tmux
        map <C-h> <C-w>h
        map <C-j> <C-w>j
        map <C-k> <C-w>k
        map <C-l> <C-w>l

    " Window split and open file
        nnoremap <leader>s :sfind *
        nnoremap <leader>v :vert sfind *

" _  _ _ ____ _  _ ____ _       _  _ ____ ___  ____
" |  | | [__  |  | |__| |       |\/| |  | |  \ |___
"  \/  | ___] |__| |  | |___    |  | |__| |__/ |___
"
" VISUAL mode

    " Enter visual mode
        nmap <enter> V

    " indent without leaving VISUAL mode
        vnoremap < <gv
        vnoremap > >gv

    " repeat operator with a visual selection (!)
        " http://stackoverflow.com/a/8064607/127816
        vnoremap . :normal .<CR>


" _  _ ____ ____ ___  ___ ____ ____ ____
" |\ | |___ |__/ |  \  |  |__/ |___ |___
" | \| |___ |  \ |__/  |  |  \ |___ |___
"
" NERDTree

    set ttyfast                    " ensure fast terminal performance
    set lazyredraw

    nmap <leader>t :NERDTreeToggle<CR>
    nmap <leader>f :NERDTreeFind<CR>

    let g:NERDTreeDirArrowExpandable = 'â–¸'
    let g:NERDTreeDirArrowCollapsible = 'â–¾'
    let g:NERDTreeQuitOnOpen = 1
    let g:NERDTreeAutoDeleteBuffer = 1
    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeDirArrows = 1

    " open for directories
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) &&
                \ !exists("s:std_in") | exe 'NERDTree' argv()[0] |
                \wincmd p | ene | endif
    " close when last open
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
                \b:NERDTreeType == "primary") | q | endif

    let g:netrw_dirhistmax = 0                 " don't save .netrwhist files

"/~` _  _ _  _ _  _  _ _|_ _
"\_,(_)| | || | |(/_| | | _\
"
" Comments
"
    let g:NERDCommentEmptyLines = 1
    let g:NERDRemoveExtraSpaces = 1
    let g:NERDTrimTrailingWhitespace = 1
    let g:NERDCompactSexyComs = 1
    let g:NERDRemoveAltComs = 1

" ____ _  _ ____ _ ___ _ _  _ ____
" |___ |  | | __ |  |  | |  | |___
" |    |__| |__] |  |  |  \/  |___
"
" Git mappings

    if isdirectory(expand("~/.vim/bundle/vim-fugitive/"))
        nnoremap <silent> <leader>ga :Gwrite<cr>
        nnoremap <silent> <leader>gco :Gread<cr>
        nnoremap <silent> <leader>gc :Gcommit<cr>
        nnoremap <silent> <leader>gp :Gpush<cr>
        nnoremap <silent> <leader>gl :Gpull<cr>
        nnoremap <silent> <leader>gs :Gstatus<cr>
        nnoremap <silent> <leader>gd :Gvdiff<cr>
        nnoremap <silent> <leader>grm :Gremove<cr>
        nnoremap <silent> <leader>gmv :Gmove<cr>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>glog :Glog<CR>
        nnoremap <silent> <leader>ge :Gedit<CR>
        nnoremap <silent> <leader>gi :Git add -p %<CR>
        nnoremap <silent> <leader>gg :SignifyToggle<CR>
    endif

" ____ _   _ _  _ ___ ____ ____ ___ _ ____
" [__   \_/  |\ |  |  |__| [__   |  | |
" ___]   |   | \|  |  |  | ___]  |  | |___
"
" syntastic checking
"
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let syntastic_mode_map = { 'passive_filetypes': ['html'] }

" ____ ___ ____ ___ _  _ ____    _    _ _  _ ____
" [__   |  |__|  |  |  | [__     |    | |\ | |___
" ___]  |  |  |  |  |__| ___]    |___ | | \| |___
"
" Status line

    set noshowmode                  " lightline shows mode
    set showcmd                     " show partial cmds in status line
    set ruler                       " shows cursor position in status bar
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " spf13 steroid ruler
    set laststatus=2                " always show for lightline

" | . _ |_ _|_|. _  _
" |_|(_|| | | ||| |(/_
"     _|
" Lightline status line

    let g:lightline = {
      \   'colorscheme': 'default',
      \   'active': {
      \     'left':  [ ['mode', 'paste'],
      \                [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \     'right': [ ['lineinfo'],
      \                ['charvaluehex', 'percent'],
      \                ['filetype'] ]
      \   },
      \   'component': {
      \      'charvaluehex': '0x%B'
      \   },
      \   'component_function': {
      \      'gitbranch': 'fugitive#head',
      \      'fileformat': 'LightlineFileformat',
      \      'filetype': 'LightlineFiletype',
      \   }
      \ }

    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

"  dP""b8  dP"Yb  8b    d8 88""Yb 88     888888 888888 88  dP"Yb  88b 88
" dP   `" dP   Yb 88b  d88 88__dP 88     88__     88   88 dP   Yb 88Yb88
" Yb      Yb   dP 88YbdP88 88"""  88  .o 88""     88   88 Yb   dP 88 Y88
"  YboodP  YbodP  88 YY 88 88     88ood8 888888   88   88  YbodP  88  Y8

" Completion

    " Wildmenu
    "set wildmenu                     show a navigable menu for tab completion
    "set wildmode=list:longest,full   list all matches, longest full match first
    "set omnifunc=syntaxcomplete#Complete     turn on native completion

" ___  ____ ____ ___  _    ____ ___ ____
" |  \ |___ |  | |__] |    |___  |  |___
" |__/ |___ |__| |    |___ |___  |  |___
"
" Deoplete completion popup

    let g:deoplete#enable_at_startup = 1
    nnoremap <leader>deo :call deoplete#toggle()<cr>

" _  _ _    ___ _ ____ _  _ _ ___  ____
" |  | |     |  | [__  |\ | | |__] [__
" |__| |___  |  | ___] | \| | |    ___]
"
" UltiSnips Snippets

    let g:UltiSnipsExpandTrigger="<C-tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-x>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"
    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"

" _  _ _ _  _ _ _ _ _ _  _ _
" |  | | |\/| | | | | |_/  |
"  \/  | |  | |_|_| | | \_ |
"
" Vim Wiki

    let wiki = {}
    " set wiki to store in Google Drive
    let wiki.path = '~/Drive/Code/wiki/'
    let wiki.path_html = '~/Drive/Code/wiki/html/'
    let wiki.css_name = 'css/wiki.css'
    let wiki.auto_export = 1

    let g:vimwiki_list = [wiki]

" ____ _ ____ _    ____ ___
" |___ | | __ |    |___  |
" |    | |__] |___ |___  |
"
" FIGlet comment headings

    nmap <leader>hh3 yyp<leader>cu0vg_:FIGlet -f threepoint<cr>V2j<leader>cl
    nmap <leader>hha yyp<leader>cu0vg_:FIGlet -f amc3line<cr>V3j<leader>cl
    nmap <leader>hhm yyp<leader>cu0vg_:FIGlet -f cybermedium<cr>V3j<leader>cl
    nmap <leader>hh4 yyp<leader>cu0vg_:FIGlet -f 4max<cr>V3j<leader>cl
    nmap <leader>hhl yyp<leader>cu0vg_:FIGlet -f computer<cr>V6j<leader>cl

" ____ ____ _    ____ ____ ____ ____ _  _ ____ _  _ ____
" |    |  | |    |  | |__/ [__  |    |__| |___ |\/| |___
" |___ |__| |___ |__| |  \ ___] |___ |  | |___ |  | |___
"
" Colorscheme

    " better to set colorscheme at the bottom
    " to apply it to all preceding additions
    colorscheme PaperColor
    "colorscheme molokai
    "colorscheme Apprentice

    " then override anything you don't like
    " hi linenr ctermbg=bg ctermfg=darkgray
    hi LineNr ctermbg=bg ctermfg=darkgray
    hi Folded cterm=bold ctermfg=black ctermbg=062
    hi clear signcolumn

" Abbrevs

    iab <expr> hugotime strftime("%Y-%m-%dT%H:%M%:%S%z")
    iab <expr> w3time strftime("%FT%T%z")
    iab <expr> nowtime strftime("%c")

" Folding
"
    setlocal foldenable
    setlocal foldmethod=indent
