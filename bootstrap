#!/usr/bin/env bash
#
# bootstrap installs things.

# Required: clone this repo into your $HOME
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# if things goes sideways quit suddenly
# would leave more to undo otherwise
set -e

pfinfo () {
    printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

pfwarn () {
    printf "\r  [ \033[00;33mN.B.\033[0m ] $1\n"
}

pfuser () {
    printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

pfsuccess () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

pffail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    exit
}

setup_gitconfig () {
    if ! [ -f ./git/gitconfig.local.symlink ]
    then
        pfinfo 'setup gitconfig'

        git_credential='cache'

        if [ "$(uname -s)" == "Darwin" ]
        then
            git_credential='osxkeychain'
        fi

        pfuser ' - What is your github author name?'
        read -ep "My name is: " git_authorname
        pfuser ' - What is your github author email?'
        read -ep "Mail me at: " git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" ./git/gitconfig.local.symlink.example > ./git/gitconfig.local.symlink

        pfsuccess 'gitconfig configured'
    fi
}

link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then

        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then

            local currentSrc="$(readlink $dst)"

            if [ "$currentSrc" == "$src" ]
            then

                skip=true;

            else

                pfuser "File already exists: $dst ($(basename "$src"))\nWhat to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac

            fi

        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm "$dst"
            pfsuccess "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            pfsuccess "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            pfsuccess "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]  # "false" or empty
    then
        ln -s "$1" "$2"
        pfsuccess "linked $1 to $2"
    fi
}

install_dotfiles () {
    pfinfo 'Installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

set_mac_defaults() {
    pfinfo "This computer is named :$1. Change it?"
    read -e -p "$1"
    ./macos/set-default.sh $REPLY
}

install_fonts() {
    pfinfo "Installing powerline patched hacker fonts"

    . "$HOME/.dotfiles/fonts/install.sh"

    pfsuccess "Hacker fonts installed. Powerline glyphs enabled."
}

import_colors() {
    # Specify the preferences directory
    defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/"
    # Tell iTerm2 to use the custom preferences in the directory
    defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
    if [[ $? -eq 0 ]]
    then
        pfsuccess "Configured iTerm2 to load the custom preferences"
    else
        pffail "Unable to apply iTerm2 preferences" >&2
    fi
}

setup_vundle() {

    pfinfo "Checking for previous vim files"

    local system_shell="$SHELL"
    export SHELL='/bin/sh'

    if [[ -d ~/.vim ]] ; then
        pfwarn "Existing vim files found"
        now="$(date '+%Y%m%d%H%M')"
        pfinfo "Backing up old vim files in ${HOME}/.vim_${now}"
        mv "${HOME}/.vim" "${HOME}/.vim_${now}"
    fi

    vim \
        # -u "$1" \
        "+set nomore" \
        "+BundleInstall!" \
        "+BundleClean" \
        "+qall"

    export SHELL="$system_shell"

    pfsuccess "Installing vim plugins via Vundle..."
}

ask() {
    pfuser $1
    read -p "(y/n): " -n1
    echo ''
    if [[ $REPLY =~ '^[Yy]' ]] ; then
        $2 $3
    else
        pfinfo "That's ok. Maybe later."
    fi
}

default_fish() {
    sudo chsh -s $HOMEBREW_PREFIX/fish
    echo $HOMEBREW_PREFIX/fish | sudo tee -a /etc/shells
    pfinfo "Installing Oh My Fish in a subshell"
    ( curl -L https://get.oh-my.fish | fish )
}

install_mosh() {
    git clone https://github.com/mobile-shell/mosh
    cd mosh
    ./autogen.sh
    ./configure
    make
    make install
}

setup_gitconfig
install_dotfiles
ask set_mac_defaults "Do you want to set your Mac OS defaults to rad?" $hostname
install_fonts
import_colors
setup_vundle #TODO: pass bundles files as an argument to vim -u
ask default_fish "Do you want to set \`fish\` as your default shell?"
# ask install_mosh "Is this a remote terminal where you want \`mosh\`?"

cat << EOF

$&%#&%$&#$&%&#$&%&#$&%&#$&%&%#&#$&%&#$&#$&%&#$&#$&%#&*#%&#%&#%&#%&#

I think we're all feeling a bit dotty now.

To test everything out launch \`iTerm\`,
which will load \`fish\` as your shell,
which will attach to a \`tmux\` session,
which will open \`vim\` to ~/.dotfiles.

Try \`omf help\` to activate Oh My Fish!
Oh, and fish uses \`help\` instead of man.

Dev on!
ðŸ’“ krry

$&%#&%$&#$&%&#$&%&#$&%&#$&%&%#&#$&%&#$&#$&%&#$&#$&%#&*#%&#%&#%&#%&#
EOF
exit 0
